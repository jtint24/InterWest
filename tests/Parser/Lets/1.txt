parser
let a = 5
let b = 7
let c = "hey there this is a string"

EXPECTED_RESULT:
| TreeKind(file)
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `a` tokenType = identifier }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `=` tokenType = = }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| { lexeme = `5` tokenType = int }
|	|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace }
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `b` tokenType = identifier }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `=` tokenType = = }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| { lexeme = `7` tokenType = int }
|	|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace }
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `c` tokenType = identifier }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `=` tokenType = = }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| { lexeme = `"hey there this is a string"` tokenType = String }
|	|	|	|	|	|	| { lexeme = `\n\n` tokenType = whitespace }
