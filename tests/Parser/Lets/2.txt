parser
let a = let a = 5
let b = {Int a -> a}
let it = "had been going so well"
let and = (then)(I)(broke)(my)(eggshell)
and(entered)
let the = let world = let as = let a = let brontosaurus = 4

EXPECTED_RESULT:
| TreeKind(file)
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 1 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 1 }
|	|	|	|	| { lexeme = `a` tokenType = identifier lineNumber = 1 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 1 }
|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 1 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 1 }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| TreeKind(let)
|	|	|	|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 1 }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 1 }
|	|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier lineNumber = 1 }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 1 }
|	|	|	|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 1 }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 1 }
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	| { lexeme = `5` tokenType = int lineNumber = 1 }
|	|	|	|	|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace lineNumber = 1 }
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 2 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 2 }
|	|	|	|	| { lexeme = `b` tokenType = identifier lineNumber = 2 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 2 }
|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 2 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 2 }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| TreeKind(lambda)
|	|	|	|	|	|	|	| { lexeme = `{` tokenType = { lineNumber = 2 }
|	|	|	|	|	|	|	| TreeKind(parameter list)
|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	| { lexeme = `Int` tokenType = identifier lineNumber = 2 }
|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 2 }
|	|	|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier lineNumber = 2 }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 2 }
|	|	|	|	|	|	|	| { lexeme = `->` tokenType = -> lineNumber = 2 }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 2 }
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier lineNumber = 2 }
|	|	|	|	|	|	|	| { lexeme = `}` tokenType = } lineNumber = 2 }
|	|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace lineNumber = 2 }
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 3 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 3 }
|	|	|	|	| { lexeme = `it` tokenType = identifier lineNumber = 3 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 3 }
|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 3 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 3 }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| { lexeme = `"had been going so well"` tokenType = String lineNumber = 3 }
|	|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace lineNumber = 3 }
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 4 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 4 }
|	|	|	|	| { lexeme = `and` tokenType = identifier lineNumber = 4 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 4 }
|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 4 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 4 }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	| { lexeme = `(` tokenType = ( lineNumber = 4 }
|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `then` tokenType = identifier lineNumber = 4 }
|	|	|	|	|	|	|	|	|	|	| { lexeme = `)` tokenType = ) lineNumber = 4 }
|	|	|	|	|	|	|	|	|	| { lexeme = `(` tokenType = ( lineNumber = 4 }
|	|	|	|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `I` tokenType = identifier lineNumber = 4 }
|	|	|	|	|	|	|	|	|	| { lexeme = `)` tokenType = ) lineNumber = 4 }
|	|	|	|	|	|	|	|	| { lexeme = `(` tokenType = ( lineNumber = 4 }
|	|	|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `broke` tokenType = identifier lineNumber = 4 }
|	|	|	|	|	|	|	|	| { lexeme = `)` tokenType = ) lineNumber = 4 }
|	|	|	|	|	|	|	| { lexeme = `(` tokenType = ( lineNumber = 4 }
|	|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	| { lexeme = `my` tokenType = identifier lineNumber = 4 }
|	|	|	|	|	|	|	| { lexeme = `)` tokenType = ) lineNumber = 4 }
|	|	|	|	|	|	| { lexeme = `(` tokenType = ( lineNumber = 4 }
|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	| { lexeme = `eggshell` tokenType = identifier lineNumber = 4 }
|	|	|	|	|	|	| { lexeme = `)` tokenType = ) lineNumber = 4 }
|	|	|	| { lexeme = `\n` tokenType = whitespace lineNumber = 4 }
|	| TreeKind(full expression)
|	|	| TreeKind(expression call)
|	|	|	| TreeKind(delimited expression)
|	|	|	|	| { lexeme = `and` tokenType = identifier lineNumber = 5 }
|	|	|	| { lexeme = `(` tokenType = ( lineNumber = 5 }
|	|	|	| TreeKind(argument list)
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| { lexeme = `entered` tokenType = identifier lineNumber = 5 }
|	|	|	| { lexeme = `)` tokenType = ) lineNumber = 5 }
|	| { lexeme = `\n` tokenType = whitespace lineNumber = 5 }
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 6 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	| { lexeme = `the` tokenType = identifier lineNumber = 6 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 6 }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| TreeKind(let)
|	|	|	|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 6 }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	| { lexeme = `world` tokenType = identifier lineNumber = 6 }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 6 }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	| TreeKind(let)
|	|	|	|	|	|	|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	| { lexeme = `as` tokenType = identifier lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(let)
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(let)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `let` tokenType = let lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `brontosaurus` tokenType = identifier lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `=` tokenType = = lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `4` tokenType = int lineNumber = 6 }
|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `\n\n` tokenType = whitespace lineNumber = 6 }
