parser
let a = let a = 5
let b = {Int a -> a}
let it = "had been going so well"
let and = (then)(I)(broke)(my)(eggshell)
and(entered)
let the = let world = let as = let a = let brontosaurus = 4

EXPECTED_RESULT:
Nonterminal(TreeKind(file), [
	Nonterminal(TreeKind(expression), [
		Nonterminal(TreeKind(delimitedExpression), [
			Nonterminal(TreeKind(let), [
				{ lexeme = `let` tokenType = let },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `a` tokenType = identifier },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `=` tokenType = = },
				{ lexeme = ` ` tokenType = whitespace },
				Nonterminal(TreeKind(expression), [
					Nonterminal(TreeKind(delimitedExpression), [
						Nonterminal(TreeKind(let), [
							{ lexeme = `let` tokenType = let },
							{ lexeme = ` ` tokenType = whitespace },
							{ lexeme = `a` tokenType = identifier },
							{ lexeme = ` ` tokenType = whitespace },
							{ lexeme = `=` tokenType = = },
							{ lexeme = ` ` tokenType = whitespace },
							Nonterminal(TreeKind(expression), [
								Nonterminal(TreeKind(delimitedExpression), [
									{ lexeme = `5` tokenType = int },
									{ lexeme = `\n` tokenType = whitespace }
								])
							])
						])
					])
				])
			])
		])
	]),
	Nonterminal(TreeKind(expression), [
		Nonterminal(TreeKind(delimitedExpression), [
			Nonterminal(TreeKind(let), [
				{ lexeme = `let` tokenType = let },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `b` tokenType = identifier },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `=` tokenType = = },
				{ lexeme = ` ` tokenType = whitespace },
				Nonterminal(TreeKind(expression), [
					Nonterminal(TreeKind(delimitedExpression), [
						Nonterminal(TreeKind(lambda), [
							{ lexeme = `{` tokenType = { },
							Nonterminal(TreeKind(parameter list), [
								Nonterminal(TreeKind(expression), [
									Nonterminal(TreeKind(delimitedExpression), [
										{ lexeme = `Int` tokenType = identifier },
										{ lexeme = ` ` tokenType = whitespace }
									])
								]),
								{ lexeme = `a` tokenType = identifier }
							]),
							{ lexeme = ` ` tokenType = whitespace },
							{ lexeme = `->` tokenType = -> },
							{ lexeme = ` ` tokenType = whitespace },
							Nonterminal(TreeKind(expression), [
								Nonterminal(TreeKind(delimitedExpression), [
									{ lexeme = `a` tokenType = identifier }
								])
							]),
							{ lexeme = `}` tokenType = } }
						]),
						{ lexeme = `\n` tokenType = whitespace }
					])
				])
			])
		])
	]),
	Nonterminal(TreeKind(expression), [
		Nonterminal(TreeKind(delimitedExpression), [
			Nonterminal(TreeKind(let), [
				{ lexeme = `let` tokenType = let },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `it` tokenType = identifier },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `=` tokenType = = },
				{ lexeme = ` ` tokenType = whitespace },
				Nonterminal(TreeKind(expression), [
					Nonterminal(TreeKind(delimitedExpression), [
						{ lexeme = `"had been going so well"` tokenType = String },
						{ lexeme = `\n` tokenType = whitespace }
					])
				])
			])
		])
	]),
	Nonterminal(TreeKind(expression), [
		Nonterminal(TreeKind(delimitedExpression), [
			Nonterminal(TreeKind(let), [
				{ lexeme = `let` tokenType = let },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `and` tokenType = identifier },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `=` tokenType = = },
				{ lexeme = ` ` tokenType = whitespace },
				Nonterminal(TreeKind(expression), [
					Nonterminal(TreeKind(expression call), [
						Nonterminal(TreeKind(expression call), [
							Nonterminal(TreeKind(expression call), [
								Nonterminal(TreeKind(expression call), [
									Nonterminal(TreeKind(delimitedExpression), [
										{ lexeme = `(` tokenType = ( },
										Nonterminal(TreeKind(expression), [
											Nonterminal(TreeKind(delimitedExpression), [
												{ lexeme = `then` tokenType = identifier }
											])
										]),
										{ lexeme = `)` tokenType = ) }
									]),
									{ lexeme = `(` tokenType = ( },
									Nonterminal(TreeKind(argument list), [
										Nonterminal(TreeKind(expression), [
											Nonterminal(TreeKind(delimitedExpression), [
												{ lexeme = `I` tokenType = identifier }
											])
										])
									]),
									{ lexeme = `)` tokenType = ) }
								]),
								{ lexeme = `(` tokenType = ( },
								Nonterminal(TreeKind(argument list), [
									Nonterminal(TreeKind(expression), [
										Nonterminal(TreeKind(delimitedExpression), [
											{ lexeme = `broke` tokenType = identifier }
										])
									])
								]),
								{ lexeme = `)` tokenType = ) }
							]),
							{ lexeme = `(` tokenType = ( },
							Nonterminal(TreeKind(argument list), [
								Nonterminal(TreeKind(expression), [
									Nonterminal(TreeKind(delimitedExpression), [
										{ lexeme = `my` tokenType = identifier }
									])
								])
							]),
							{ lexeme = `)` tokenType = ) }
						]),
						{ lexeme = `(` tokenType = ( },
						Nonterminal(TreeKind(argument list), [
							Nonterminal(TreeKind(expression), [
								Nonterminal(TreeKind(delimitedExpression), [
									{ lexeme = `eggshell` tokenType = identifier }
								])
							])
						]),
						{ lexeme = `)` tokenType = ) },
						{ lexeme = `\n` tokenType = whitespace }
					])
				])
			])
		])
	]),
	Nonterminal(TreeKind(expression), [
		Nonterminal(TreeKind(expression call), [
			Nonterminal(TreeKind(delimitedExpression), [
				{ lexeme = `and` tokenType = identifier }
			]),
			{ lexeme = `(` tokenType = ( },
			Nonterminal(TreeKind(argument list), [
				Nonterminal(TreeKind(expression), [
					Nonterminal(TreeKind(delimitedExpression), [
						{ lexeme = `entered` tokenType = identifier }
					])
				])
			]),
			{ lexeme = `)` tokenType = ) },
			{ lexeme = `\n` tokenType = whitespace }
		])
	]),
	Nonterminal(TreeKind(expression), [
		Nonterminal(TreeKind(delimitedExpression), [
			Nonterminal(TreeKind(let), [
				{ lexeme = `let` tokenType = let },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `the` tokenType = identifier },
				{ lexeme = ` ` tokenType = whitespace },
				{ lexeme = `=` tokenType = = },
				{ lexeme = ` ` tokenType = whitespace },
				Nonterminal(TreeKind(expression), [
					Nonterminal(TreeKind(delimitedExpression), [
						Nonterminal(TreeKind(let), [
							{ lexeme = `let` tokenType = let },
							{ lexeme = ` ` tokenType = whitespace },
							{ lexeme = `world` tokenType = identifier },
							{ lexeme = ` ` tokenType = whitespace },
							{ lexeme = `=` tokenType = = },
							{ lexeme = ` ` tokenType = whitespace },
							Nonterminal(TreeKind(expression), [
								Nonterminal(TreeKind(delimitedExpression), [
									Nonterminal(TreeKind(let), [
										{ lexeme = `let` tokenType = let },
										{ lexeme = ` ` tokenType = whitespace },
										{ lexeme = `as` tokenType = identifier },
										{ lexeme = ` ` tokenType = whitespace },
										{ lexeme = `=` tokenType = = },
										{ lexeme = ` ` tokenType = whitespace },
										Nonterminal(TreeKind(expression), [
											Nonterminal(TreeKind(delimitedExpression), [
												Nonterminal(TreeKind(let), [
													{ lexeme = `let` tokenType = let },
													{ lexeme = ` ` tokenType = whitespace },
													{ lexeme = `a` tokenType = identifier },
													{ lexeme = ` ` tokenType = whitespace },
													{ lexeme = `=` tokenType = = },
													{ lexeme = ` ` tokenType = whitespace },
													Nonterminal(TreeKind(expression), [
														Nonterminal(TreeKind(delimitedExpression), [
															Nonterminal(TreeKind(let), [
																{ lexeme = `let` tokenType = let },
																{ lexeme = ` ` tokenType = whitespace },
																{ lexeme = `brontosaurus` tokenType = identifier },
																{ lexeme = ` ` tokenType = whitespace },
																{ lexeme = `=` tokenType = = },
																{ lexeme = ` ` tokenType = whitespace },
																Nonterminal(TreeKind(expression), [
																	Nonterminal(TreeKind(delimitedExpression), [
																		{ lexeme = `4` tokenType = int },
																		{ lexeme = `\n\n` tokenType = whitespace }
																	])
																])
															])
														])
													])
												])
											])
										])
									])
								])
							])
						])
					])
				])
			])
		])
	])
])
