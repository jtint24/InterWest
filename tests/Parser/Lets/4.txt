parser
let minimal = {Int a -> a}

EXPECTED_RESULT:
| TreeKind(file)
|	| TreeKind(full expression)
|	|	| TreeKind(delimitedExpression)
|	|	|	| TreeKind(let)
|	|	|	|	| { lexeme = `let` tokenType = let }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `minimal` tokenType = identifier }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `=` tokenType = = }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimitedExpression)
|	|	|	|	|	|	| TreeKind(lambda)
|	|	|	|	|	|	|	| { lexeme = `{` tokenType = { }
|	|	|	|	|	|	|	| TreeKind(parameter list)
|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	| TreeKind(delimitedExpression)
|	|	|	|	|	|	|	|	|	|	| { lexeme = `Int` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	| { lexeme = `->` tokenType = -> }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(delimitedExpression)
|	|	|	|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier }
|	|	|	|	|	|	|	| { lexeme = `}` tokenType = } }
|	|	|	|	|	|	| { lexeme = `\n\n` tokenType = whitespace }
