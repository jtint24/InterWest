parser
if {Bool b -> b}(true) {
    print({Int c -> c+2}(4))
}

EXPECTED_RESULT:
| TreeKind(file)
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(if statement)
|	|	|	|	| { lexeme = `if` tokenType = if }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	| TreeKind(lambda)
|	|	|	|	|	|	|	|	| { lexeme = `{` tokenType = { }
|	|	|	|	|	|	|	|	| TreeKind(parameter list)
|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `Bool` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	|	| { lexeme = `b` tokenType = identifier }
|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	| { lexeme = `->` tokenType = -> }
|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	| { lexeme = `b` tokenType = identifier }
|	|	|	|	|	|	|	|	| { lexeme = `}` tokenType = } }
|	|	|	|	|	|	| { lexeme = `(` tokenType = ( }
|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	| { lexeme = `true` tokenType = identifier }
|	|	|	|	|	|	| { lexeme = `)` tokenType = ) }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `{` tokenType = { }
|	|	|	|	| { lexeme = `\n    ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	| { lexeme = `print` tokenType = identifier }
|	|	|	|	|	|	| { lexeme = `(` tokenType = ( }
|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	| TreeKind(lambda)
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `{` tokenType = { }
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(parameter list)
|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `Int` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `c` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `->` tokenType = -> }
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(binary expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `c` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `+` tokenType = plus }
|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `2` tokenType = int }
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `}` tokenType = } }
|	|	|	|	|	|	|	|	|	| { lexeme = `(` tokenType = ( }
|	|	|	|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `4` tokenType = int }
|	|	|	|	|	|	|	|	|	| { lexeme = `)` tokenType = ) }
|	|	|	|	|	|	| { lexeme = `)` tokenType = ) }
|	|	|	|	| { lexeme = `\n` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	| { lexeme = `}` tokenType = } }
|	|	|	| { lexeme = `\n\n` tokenType = whitespace }
