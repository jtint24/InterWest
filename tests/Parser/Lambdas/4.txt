parser
{
{Type t -> t}(Int) a,
Float b ->
a + b
}()

EXPECTED_RESULT:
| TreeKind(file)
|	| TreeKind(full expression)
|	|	| TreeKind(expression call)
|	|	|	| TreeKind(delimited expression)
|	|	|	|	| TreeKind(lambda)
|	|	|	|	|	| { lexeme = `{` tokenType = { }
|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace }
|	|	|	|	|	| TreeKind(parameter list)
|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	| TreeKind(lambda)
|	|	|	|	|	|	|	|	|	|	| { lexeme = `{` tokenType = { }
|	|	|	|	|	|	|	|	|	|	| TreeKind(parameter list)
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `Type` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `t` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	|	|	| { lexeme = `->` tokenType = -> }
|	|	|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `t` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	| { lexeme = `}` tokenType = } }
|	|	|	|	|	|	|	|	| { lexeme = `(` tokenType = ( }
|	|	|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `Int` tokenType = identifier }
|	|	|	|	|	|	|	|	| { lexeme = `)` tokenType = ) }
|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier }
|	|	|	|	|	|	| { lexeme = `,` tokenType = , }
|	|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace }
|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	| { lexeme = `Float` tokenType = identifier }
|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	| { lexeme = `b` tokenType = identifier }
|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	| { lexeme = `->` tokenType = -> }
|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace }
|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	| TreeKind(binary expression)
|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier }
|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	| { lexeme = `+` tokenType = plus }
|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	|	| { lexeme = `b` tokenType = identifier }
|	|	|	|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace }
|	|	|	|	|	| { lexeme = `}` tokenType = } }
|	|	|	| { lexeme = `(` tokenType = ( }
|	|	|	| TreeKind(argument list)
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	| { lexeme = `)` tokenType = ) }
|	| { lexeme = `\n\n` tokenType = whitespace }
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
