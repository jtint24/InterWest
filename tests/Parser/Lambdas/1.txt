parser
{Int a, Int b, String c -> String
    let result = (a)
    return result
}(1,2,"hello")

EXPECTED_RESULT:
| TreeKind(file)
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(lambda)
|	|	|	|	| { lexeme = `{` tokenType = { }
|	|	|	|	| TreeKind(parameter list)
|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	| { lexeme = `Int` tokenType = identifier }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	| { lexeme = `a` tokenType = identifier }
|	|	|	|	|	| { lexeme = `,` tokenType = , }
|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	| { lexeme = `Int` tokenType = identifier }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	| { lexeme = `b` tokenType = identifier }
|	|	|	|	|	| { lexeme = `,` tokenType = , }
|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	| { lexeme = `String` tokenType = identifier }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	| { lexeme = `c` tokenType = identifier }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| { lexeme = `->` tokenType = -> }
|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| { lexeme = `String` tokenType = identifier }
|	|	|	|	|	|	| { lexeme = `\n    ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| TreeKind(let)
|	|	|	|	|	|	|	| { lexeme = `let` tokenType = let }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	| { lexeme = `result` tokenType = identifier }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	| { lexeme = `=` tokenType = = }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	| TreeKind(func call expression)
|	|	|	|	|	|	|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `(` tokenType = ( }
|	|	|	|	|	|	|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `a` tokenType = identifier }
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `)` tokenType = ) }
|	|	|	|	|	|	|	|	|	|	|	| { lexeme = `\n    ` tokenType = whitespace }
|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	| TreeKind(return)
|	|	|	|	|	|	|	| { lexeme = `return` tokenType = return }
|	|	|	|	|	|	|	| { lexeme = ` ` tokenType = whitespace }
|	|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	|	| { lexeme = `result` tokenType = identifier }
|	|	|	|	|	|	|	|	|	| { lexeme = `\n` tokenType = whitespace }
|	|	|	|	| { lexeme = `}` tokenType = } }
|	| TreeKind(full expression)
|	|	| TreeKind(delimited expression)
|	|	|	| TreeKind(func call expression)
|	|	|	|	| TreeKind(expression call)
|	|	|	|	|	| { lexeme = `(` tokenType = ( }
|	|	|	|	|	| TreeKind(argument list)
|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	| { lexeme = `1` tokenType = int }
|	|	|	|	|	|	| { lexeme = `,` tokenType = , }
|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	| { lexeme = `2` tokenType = int }
|	|	|	|	|	|	| { lexeme = `,` tokenType = , }
|	|	|	|	|	|	| TreeKind(full expression)
|	|	|	|	|	|	|	| TreeKind(delimited expression)
|	|	|	|	|	|	|	|	| { lexeme = `"hello"` tokenType = String }
|	|	|	|	|	| { lexeme = `)` tokenType = ) }
|	|	|	|	|	| { lexeme = `\n\n` tokenType = whitespace }
