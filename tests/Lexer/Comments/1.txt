lexer
// This should be a comment
// This // is also a // comment
//This//isacomment
this should not be // this is a comment
but this is not a ///////////////
/////

EXPECTED_RESULT:
{ lexeme = `// This should be a comment\n` tokenType = inlineComment lineNumber = 1 }{ lexeme = `// This // is also a // comment\n` tokenType = inlineComment lineNumber = 2 }{ lexeme = `//This//isacomment\n` tokenType = inlineComment lineNumber = 3 }{ lexeme = `this` tokenType = identifier lineNumber = 4 }{ lexeme = ` ` tokenType = whitespace lineNumber = 4 }{ lexeme = `should` tokenType = identifier lineNumber = 4 }{ lexeme = ` ` tokenType = whitespace lineNumber = 4 }{ lexeme = `not` tokenType = identifier lineNumber = 4 }{ lexeme = ` ` tokenType = whitespace lineNumber = 4 }{ lexeme = `be` tokenType = identifier lineNumber = 4 }{ lexeme = ` ` tokenType = whitespace lineNumber = 4 }{ lexeme = `// this is a comment\n` tokenType = inlineComment lineNumber = 4 }{ lexeme = `but` tokenType = identifier lineNumber = 5 }{ lexeme = ` ` tokenType = whitespace lineNumber = 5 }{ lexeme = `this` tokenType = identifier lineNumber = 5 }{ lexeme = ` ` tokenType = whitespace lineNumber = 5 }{ lexeme = `is` tokenType = identifier lineNumber = 5 }{ lexeme = ` ` tokenType = whitespace lineNumber = 5 }{ lexeme = `not` tokenType = identifier lineNumber = 5 }{ lexeme = ` ` tokenType = whitespace lineNumber = 5 }{ lexeme = `a` tokenType = identifier lineNumber = 5 }{ lexeme = ` ` tokenType = whitespace lineNumber = 5 }{ lexeme = `///////////////\n` tokenType = inlineComment lineNumber = 5 }{ lexeme = `/////\n` tokenType = inlineComment lineNumber = 6 }{ lexeme = `\n` tokenType = whitespace lineNumber = 7 }
