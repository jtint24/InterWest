

Things to do:

    - [ ] Lexer
        - [ ] Revise identifier definition to be actual (accept a-Z, 0-9 after first char, and _)
    - [ ] Parser
        - [x] Add Pratt parsing / parse binary operators
    - [ ] Interpreter
        - [ ] Improve Type System
            - [ ] Allow Type::subtypeOf to handle regular types
                - [x] Build a TriValue logic enum to handle the trivalued logic of this method
                - [x] Handle the trivalue logic wherever this function is used
                - [ ] Make a function to check an expression against a type, either by static value or by the expression's type
        - [ ] Improve Error Messages
            - [ ] Add line numbers to error messages
                - [ ] Add line numbers to expressions
                - [ ] Add line numbers to parse nodes
                - [ ] Add line numbers to lexemes
            - [ ] Add highlights to error messages
                - [ ] Give parse tree nodes their internal lexemes
                - [ ] Give expressions their parse tree nodes
                - [ ] Allow errors to be given a lexeme string with some "highlighted"
        - [ ] If Statements
            - [ ] Add an "else" condition
                - [ ] Change the parse definition of conditionals to allow an else
                - [ ] Change the ExpressionBuilder::buildIfExpression to handle else conditions
                - [ ] Modify ConditionalExpression to handle else (make sure the else code is validated too)
    - [ ] Tests
        - [x] Build testing module
        - [ ] Add tests for if statements
    - [ ] Minor fixes
        - [x] Change all methods that return/accept subclasses of Collection to return as general a subclass as possible (ie. ArrayList<> -> List<>)
        - [x] Make test interpreter its own thing that inherits from Interpreter, rather than just having it be a boolean value
        - [ ] Make the parser read token-by-token from the lexer, rather than having it require all the lexemes at once


