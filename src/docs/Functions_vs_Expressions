Functions vs. Expressions

Functions and expressions serve somewhat similar roles in the code, in that they're both classes which can take values,
perform computations on them, and return the result. But they are not the same! Here's a few key differences:

1. Expressions are composable, Functions should not be

Certain expressions can contain expressions within them. This is the case for expressions which represent blocks of
code, return expressions, lambda expressions, et cetera. Meanwhile, functions are not and should not be composable. Any
function should have its behavior defined by a single builtin or by an Expression.

2. Expressions modify context, Functions cannot

Expressions can introduce variables to the context, can add stack frames, or can return from stack frames. Functions are
unable to do this, and in fact cannot read the context that they exist in at all. A function's output should be solely
deterministic from its inputs, not its context. Expressions can read the context as much as they like (don't confuse
modification of context with side-effects: adding an immutable variable to a stack frame, entering a new stack frame,
or the other limited ways that the context cannot be modified, do not constitute side effects in a meaningful way).

3. Functions are values, Expressions are not

Functions are of course values, which means that constants can be assigned to them, they can be passed into or returned
from functions, etc. If you want to package the behavior of an expression as a first class value, you have to wrap it
in a Function via lambdas.


